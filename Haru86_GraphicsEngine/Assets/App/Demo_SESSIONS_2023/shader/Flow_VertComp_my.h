// Generated with Shader Minifier 1.3.5 (https://github.com/laurentlb/Shader_Minifier/)

// input
"#version 430\n"
"#extension GL_ARB_separate_shader_objects:enable\n"
"uniform mat4 MVPMatrix,MMatrix,VMatrix,PMatrix;"
"uniform float _time,_deltaTime;"
"uniform vec3 _CameraPos;"
"uniform int _IsMulMatOnVert,_IsMOnly;"
"uniform float _FlowCellSize;struct SFlowData{vec4 Pos;vec4 Angle;};"
"layout(std430, binding = 2) buffer FlowDataBuffer{SFlowData flowData[];} rw_FlowDataBuffer;"
"layout(location=0) in vec3 vertex;"
"layout(location=1) in vec3 normal;"
"layout(location=2) in vec2 texcoord;"
"layout(location=0) out vec2 out_uv;"
"layout(location=1) out vec4 out_WorldVertexPos;"
"layout(location=2) out vec4 out_WorldNormal;"
"layout(location=3) flat out int out_gl_InstanceID;"
"layout(location=4) out vec4 out_Color;\n"
"#define rot(a)mat2(cos(a),-sin(a),sin(a),cos(a))\n"
"void main()"
"{"
"vec4 o=vec4(vertex,1),l=vec4(normal,0);"
"int v=gl_InstanceID;"
"SFlowData n=rw_FlowDataBuffer.flowData[v];"
"o.xyz*=_FlowCellSize;"
"o.yz*=rot(n.Angle.x);"
"l.yz*=rot(n.Angle.x);"
"o.xz*=rot(n.Angle.y);"
"l.xz*=rot(n.Angle.y);"
"o.xyz+=n.Pos.xyz;"
"gl_Position=PMatrix*VMatrix*o;"
"out_uv=texcoord;"
"out_WorldVertexPos=o;"
"out_WorldNormal=l;"
"out_gl_InstanceID=v;"
"out_Color=vec4(1,0,0,1);"
"}",

