R"(

#version 430

// thread
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

// Uniform 
uniform float _time;
uniform float _deltaTime;
uniform int _SegmentNum;

//
struct STrailData
{
	vec4 Pos;
	vec4 Rotate;
	vec4 Scale;
	vec4 Color;
	vec4 Velocity;
	vec4 TargetPos;
	vec4 Data;
};

layout(std430, binding = 0) buffer TrailDataBuffer
{
	STrailData trailData[];
} rw_TrailDataBuffer;

// 
struct SSegmentData 
{
	vec4 Pos;
	vec4 Rotate;
	vec4 Scale;
	vec4 Color;
	int  TrailIndex;
	int  SegmentIndex;
	int  GridID4Box;
	int  Padding1;
};

layout(std430, binding = 1) buffer SegmentDataBuffer
{
	SSegmentData segmentData[];
} rw_SegmentDataBuffer;

float Noise(vec2 st)
{
	return fract(sin(dot(st, vec2(12.9898, 78.233))) * 43758.5453123);
}

float PerlinNoise(vec2 st)
{
	vec2 i = floor(st);
	vec2 f = fract(st);

	float a = Noise(i);
	float b = Noise(i + vec2(1.0, 0.0));
	float c = Noise(i + vec2(0.0, 1.0));
	float d = Noise(i + vec2(1.0, 1.0));

	vec2 u = f * f * (3.0 - 2.0 * f);

	return mix(a, b, u.x) +
		(c - a) * u.y * (1.0 - u.x) +
		(d - b) * u.x * u.y;
}

void main()
{
	uint DID = gl_GlobalInvocationID.x;
	int GridID = 0;

	SSegmentData Data = rw_SegmentDataBuffer.segmentData[DID];

	if(Data.SegmentIndex == 0 /*|| Data.Data.x == 1.0*/)
	{
		STrailData trailData = rw_TrailDataBuffer.trailData[Data.TrailIndex];

		Data.Pos = trailData.Pos;
		Data.Rotate = trailData.Rotate;
		Data.Scale = trailData.Scale;
		Data.Color = trailData.Color;
		Data.GridID4Box = int(trailData.Data.y);

		rw_SegmentDataBuffer.segmentData[DID] = Data;

		GridID = Data.GridID4Box;
	}
	else
	{
		uint PrevIndex = DID - 1;
		SSegmentData PrevData = rw_SegmentDataBuffer.segmentData[PrevIndex];

		Data.Pos = PrevData.Pos;
		Data.Rotate = PrevData.Rotate;
		Data.Scale = PrevData.Scale;
		Data.Color = PrevData.Color;
		Data.GridID4Box = PrevData.GridID4Box;

		rw_SegmentDataBuffer.segmentData[DID] = Data;

		GridID = Data.GridID4Box;
	}
}

)"