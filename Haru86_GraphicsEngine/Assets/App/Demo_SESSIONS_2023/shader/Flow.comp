R"(
#version 430

// thread
layout(local_size_x = 512, local_size_y = 1, local_size_z = 1) in;

// Uniform 
uniform float _time;
uniform float _deltaTime;
uniform vec4 _WallHalfSize;
uniform int _FlowGridX;
uniform int _FlowGridZ;

uniform vec2 _NoiseScale;
uniform vec2 _NoiseOctaves;
uniform vec2 _NoiseOffset;
uniform vec2 _AngleScale;
uniform vec4 _Seed;

struct SFlowData
{
	vec4 Pos;
	vec4 Angle;
};

layout(std430, binding = 2) buffer FlowDataBuffer
{
	SFlowData flowData[];
} rw_FlowDataBuffer;

#define pi 3.1415


void main()
{
	uint DID = gl_GlobalInvocationID.x;
	float fDID = float(DID);
	vec2 DomainID = vec2(0.0);
	DomainID.y = floor(fDID/float(_FlowGridX));
	DomainID.x = fDID - DomainID.y * float(_FlowGridX);
	DomainID = DomainID / vec2(float(_FlowGridX), float(_FlowGridZ)) * 2.0 - 1.0;

	float a = atan(DomainID.y, DomainID.x);
	float flowAngle = a + pi * 0.666; // 0.5 < t < 0.75 is Spiral

	rw_FlowDataBuffer.flowData[DID].Angle.y = flowAngle;
}

)"