R"(

#version 430

layout(local_size_x = 512, local_size_y = 1, local_size_z = 1) in;

struct SFieldData
{
    vec4 Pos;
    vec4 Rot;
    vec4 Scl;
    vec4 Pad;
};

layout(std430,binding=0) buffer destFieldDataBuffer
{
	SFieldData data[];
} outFieldDataBuffer;

uniform float _time;

#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))
#define PI 3.14159265

float rand(vec2 seeds){
  return fract(sin(dot(seeds, vec2(12.9898,78.233))) * 43758.5453);
}

vec2 random2(vec2 seeds)
{
 seeds = vec2(dot(seeds, vec2(127.1, 311.7)),
 dot(seeds, vec2(269.5, 183.3)));
 return fract(sin(seeds) * 43758.5453123);
}

float perlinNoise(vec2 seeds)
{
	vec2 i = floor(seeds);
	vec2 f = fract(seeds);
	vec2 i00 = i + vec2(0, 0);
	vec2 i10 = i + vec2(1, 0);
	vec2 i01 = i + vec2(0, 1);
	vec2 i11 = i + vec2(1, 1);
	vec2 f00 = f - vec2(0, 0);
	vec2 f10 = f - vec2(1, 0);
	vec2 f01 = f - vec2(0, 1);
	vec2 f11 = f - vec2(1, 1);
	vec2 g00 = normalize(-1.0 + 2.0 * random2(i00));
	vec2 g10 = normalize(-1.0 + 2.0 * random2(i10));
	vec2 g01 = normalize(-1.0 + 2.0* random2(i01));
	vec2 g11 = normalize(-1.0 + 2.0* random2(i11));
	float v00 = dot(g00, f00);
	float v10 = dot(g10, f10);
	float v01 = dot(g01, f01);
	float v11 = dot(g11, f11);
	vec2 p = smoothstep(0.0, 1.0, f);
	float v00v10 = mix(v00, v10, p.x);
	float v01v11 = mix(v01, v11, p.x);
	return mix(v00v10, v01v11, p.y) * 0.5 + 0.5;
}

void main()
{
	uint DID = gl_GlobalInvocationID.x;
	SFieldData data = outFieldDataBuffer.data[DID];

	float RandSY = 10.0 * (sin(rand(vec2(data.Scl.w)) * 100.0 + _time) * 0.5 + 0.5);
	data.Scl.y = RandSY;
	data.Pos.y = RandSY * 0.5;

	outFieldDataBuffer.data[DID] = data;
}

)"